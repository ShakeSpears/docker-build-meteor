#!/bin/bash
set -e

if [[ ! $INPUT_DIR ]] || [[ ! $OUTPUT_DIR ]]; then
  echo "Input/Output directory variables must be set.\n"
  exit 1
fi

mkdir -p $INPUT_DIR
mkdir -p $OUTPUT_DIR

if [[ ! -d $INPUT_DIR ]] || [[ ! -d $OUTPUT_DIR ]]; then
  echo "Input/Output directories must exist.\n"
  exit 1
fi

CURRENT_DIR=$(pwd)

NVM_DIR=$HOME/.nvm
source /opt/nvm/nvm.sh

# recursively search input directory for a package.json
PACKAGE_PATH=$(find $INPUT_DIR -name package.json ! -path "*/node_modules/*"  ! -path ".git/*"  | \
  awk -F'/' '{print $0 "," NF-1}' | \
  sort -t, -nk2 | awk -F',' '{print $1}' | \
  head -n 1)

if [[ $PACKAGE_PATH ]]; then
  printf "Package found: $PACKAGE_PATH\n"

  # `get-version` parses input for known versions and picks
  # based on semver compared to package.json (if present)
  # output contains logging, last line is determined version string
  NODE_VERSION=$(get-version --engine node $PACKAGE_PATH)
  if [[ ! $NODE_VERSION ]]; then
    printf "Unable to determine node version.\n"
    exit 1
  fi

  NPM_VERSION=$(get-version --engine npm $PACKAGE_PATH)
  if [[ ! $NPM_VERSION ]]; then
    echo "Unable to determine npm version.\n"
    exit 1
  fi

  printf "Installing node $NODE_VERSION\n"
  nvm install $NODE_VERSION > /dev/null 2>&1

  printf "Installing npm $NPM_VERSION\n"
  npm install npm@$NPM_VERSION --global > /dev/null 2>&1

  printf "Installing packages from $PACKAGE_PATH\n"
  if [[ -f ${PACKAGE_PATH%/*}/npm-shrinkwrap.json ]]; then
    printf "WARN: npm-shrinkwrap.json will override dependencies declared in package.json.\n"
  fi
  cd ${PACKAGE_PATH%/*}
  npm install --production --quiet

  if [[ $RUN_TESTS ]]; then
    printf "Running tests.\n"
    npm test
  fi
fi

cd $CURRENT_DIR
cp -R $INPUT_DIR/* $OUTPUT_DIR
