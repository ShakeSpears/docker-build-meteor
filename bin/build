#!/usr/bin/env bash
set -e

CURRENT_DIR=$(pwd)

if [[ ! $INPUT_DIR ]] || [[ ! $OUTPUT_DIR ]]; then
  printf "Input/Output directory variables must be set.\n"
  exit 1
fi

mkdir -p $INPUT_DIR
mkdir -p $OUTPUT_DIR

if [[ ! -d $INPUT_DIR ]] || [[ ! -d $OUTPUT_DIR ]]; then
  printf "Input/Output directories must exist.\n"
  exit 1
fi

NVM_DIR=$HOME/.nvm
source /opt/nvm/nvm.sh

# Copy Meteor distribution to $HOME
printf "Initializing Meteor environment.\n"
cp -R /opt/home/.meteor $HOME

# Demeteorizer flags
# TODO Test for demeteorizer flags
# --json || --debug

cd $INPUT_DIR
printf "Using $(meteor --version).\n"

if [[ -f $INPUT_DIR/package.json ]]; then
  printf "Installing root package.json dependencies.\n"
  meteor npm install
fi

demeteorizer --server-only --output $OUTPUT_DIR

if [[ -d $INPUT_DIR/node_modules ]]; then
  mv $INPUT_DIR/node_modules $OUTPUT_DIR
fi

# Searches a directory top-down looking for a file.
findFile() {
  find $2 -name $1 ! -path "*/node_modules/*" ! -path ".git/*" | \
  awk -F'/' '{print $0 "," NF-1}' | \
  sort -t, -nk2 | \
  awk -F',' '{print $1}' | \
  head -n 1
}

# Recursively search input directory for a package.json
PACKAGE_PATH=$(findFile "package.json" $OUTPUT_DIR)

if [[ $PACKAGE_PATH ]]; then
  printf "Package found: ${PACKAGE_PATH/$OUTPUT_DIR/}\n"
  export PACKAGE_PATH

  # support deriving versions from package.json
  SOURCE_PATH=$PACKAGE_PATH

  NODE_VERSION=$(get-version --engine node $SOURCE_PATH 2>/dev/null) || true
  if [[ ! $NODE_VERSION ]]; then
    printf "Unable to determine Node version. Verify package.json has no errors.\n"
    exit 1
  fi

  NPM_VERSION=$(get-version --engine npm $SOURCE_PATH 2>/dev/null) || true
  if [[ ! $NPM_VERSION ]]; then
    printf "Unable to determine npm version.\n"
    exit 1
  fi

  printf "Installing node $NODE_VERSION\n"
  nvm install $NODE_VERSION > /dev/null 2>&1

  printf "Installing npm $NPM_VERSION\n"
  npm install npm@$NPM_VERSION --global > /dev/null 2>&1

  if [[ $NPM_USER ]] && [[ $NPM_PASSWORD ]] && [[ $NPM_EMAIL ]]; then
    npm-login
  fi

  npm-install

fi

MOD_DIR=$OUTPUT_DIR/.modulus
mkdir -p $MOD_DIR

# bundle nvm with output
nvm alias deploy $(nvm current)
cp -R $NVM_DIR/. $MOD_DIR/nvm
