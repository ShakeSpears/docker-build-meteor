#!/usr/bin/env bash
set -e

if [[ ! $PACKAGE_PATH ]]; then
  printf "PACKAGE_PATH variable not set"
  exit 1;
fi

NVM_DIR=$HOME/.nvm
source /opt/nvm/nvm.sh

# support deriving versions from app.json or package.json
if [ -f ${INPUT_DIR}/app.json ] && [[ $MODULUS_CONFIG_ENGINES_NODE || $MODULUS_CONFIG_ENGINES_IOJS ]]; then
  SOURCE_PATH=${INPUT_DIR}/app.json
else
  SOURCE_PATH=$PACKAGE_PATH
fi

NODE_VERSION=$(get-version --engine node $SOURCE_PATH)
if [[ ! $NODE_VERSION ]]; then
  printf "Unable to determine node version.\n"
  exit 1
fi

NPM_VERSION=$(get-version --engine npm $SOURCE_PATH)
if [[ ! $NPM_VERSION ]]; then
  echo "Unable to determine npm version.\n"
  exit 1
fi

printf "Installing node $NODE_VERSION\n"
nvm install $NODE_VERSION > /dev/null 2>&1

printf "Installing npm $NPM_VERSION\n"
npm install npm@$NPM_VERSION --global > /dev/null 2>&1

if [[ $NPM_USER ]] && [[ $NPM_PASSWORD ]] && [[ $NPM_EMAIL ]]; then
  npm-login
fi

printf "Installing packages from $PACKAGE_PATH\n"
if [[ -f ${PACKAGE_PATH%/*}/npm-shrinkwrap.json ]]; then
  printf "WARN: npm-shrinkwrap.json will override dependencies declared in package.json.\n"
fi
cd ${PACKAGE_PATH%/*}
npm install --production --quiet

if [[ $RUN_TESTS ]]; then
  printf "Running tests.\n"
  npm test
fi
